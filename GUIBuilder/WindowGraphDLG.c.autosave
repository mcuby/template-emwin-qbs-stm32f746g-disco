/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.40                          *
*        Compiled Jun 22 2017, 10:13:26                              *
*        (c) 2017 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
#include <stdint.h>
// USER END

#include "DIALOG.h"

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_WINDOW_0 (GUI_ID_USER + 0x00)
#define ID_GRAPH_0 (GUI_ID_USER + 0x01)


// USER START (Optionally insert additional defines)

#include <math.h>
//#include <arm_math.h>

// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
    { WINDOW_CreateIndirect, "WindowGraph", ID_WINDOW_0, 0, 0, 480, 272, 0, 0x0, 0 },
    { GRAPH_CreateIndirect, "Graph", ID_GRAPH_0, 0, 0, 480, 272, 0, 0x0, 0 },
    // USER START (Optionally insert additional widgets)
    // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

// USER START (Optionally insert additional static code)
static const GUI_COLOR _aColor[3] = {GUI_RED, GUI_DARKGREEN, GUI_MAGENTA};
static const U8 _aLStyle[3] = {GUI_LS_SOLID, GUI_LS_DOT, GUI_LS_DASH};
static GUI_POINT _aPoint[3];
static GRAPH_DATA_Handle newGraph;

static GRAPH_SCALE_Handle hScaleX;
static GRAPH_SCALE_Handle hScaleY;

static GUI_PID_STATE statePoint[10];
static int32_t statePointInter = 0;


// USER END



/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE *pMsg)
{
    WM_HWIN hItem;
    // USER START (Optionally insert additional variables)

    GUI_POINT addPoint[480][5];
    GUI_POINT addNewPoint[5];

    hItem = WM_GetDialogItem(pMsg->hWin, ID_GRAPH_0);
    // USER END

    switch (pMsg->MsgId) {
    case WM_INIT_DIALOG:
        //
        // Initialization of 'Graph'
        //

        hItem = WM_GetDialogItem(pMsg->hWin, ID_GRAPH_0);

//        hScale = GRAPH_SCALE_Create(28, GUI_TA_RIGHT, GRAPH_SCALE_CF_VERTICAL, 20);
//        GRAPH_AttachScale(newGraph, hScale);

        GRAPH_SetColor(hItem, 0x26282a, GRAPH_CI_BK);
        GRAPH_SetColor(hItem, 0xe7e0cd, GRAPH_CI_GRID);

        // USER START (Optionally insert additional code for further widget initialization)
        GRAPH_SetGridVis(hItem, 1);

        GRAPH_SetLineStyleH(hItem, GUI_LS_DOT);
        GRAPH_SetLineStyleV(hItem, GUI_LS_DOT);

//    newGraph = GRAPH_DATA_YT_Create(0xcb927f, 480, y, 5);
//    GRAPH_AttachData(hItem, newGraph);

        for (int i = 0; i < 480; i++) {

            addPoint[i][0].x = (short) i - 5;
            addPoint[i][0].y = (short)((136.0 * sin(i * 1.0 * M_PI / 100)) + 136.0) - 5;

            addPoint[i][1].x = addPoint[i][0].x + 10;
            addPoint[i][1].y = addPoint[i][0].y;

            addPoint[i][2].x = addPoint[i][0].x + 10;
            addPoint[i][2].y = addPoint[i][0].y + 10;

            addPoint[i][3].x = addPoint[i][0].x;
            addPoint[i][3].y = addPoint[i][0].y + 10;

            addPoint[i][4].x = addPoint[i][0].x;
            addPoint[i][4].y = addPoint[i][0].y;
        }

        newGraph = GRAPH_DATA_XY_Create(0xcb927f, 5 * 480, (const GUI_POINT *)addPoint, 5 * 480);
        GRAPH_AttachData(hItem, newGraph);

        hScaleY = GRAPH_SCALE_Create(0, GUI_TA_LEFT, GRAPH_SCALE_CF_VERTICAL, 20);
        hScaleX = GRAPH_SCALE_Create(272 - 10, GUI_TA_TOP, GRAPH_SCALE_CF_HORIZONTAL, 40);
        GRAPH_SCALE_SetOff(hScaleY, 272 / 2);


        GRAPH_SCALE_SetTextColor(hScaleX, 0x91ba60);
        GRAPH_SCALE_SetTextColor(hScaleY, 0x91ba60);

        GRAPH_AttachScale(hItem, hScaleX);
        GRAPH_AttachScale(hItem, hScaleY);


        //GRAPH_SetVSizeX(hItem, 10);
        //GRAPH_SetVSizeY(hItem, 10);

        GRAPH_SetGridDistX(hItem, 272 / 10);
        GRAPH_SetGridDistY(hItem, 272 / 10);


        // USER END
        break;
    // USER START (Optionally insert additional message handling)
    case WM_TOUCH_CHILD:

        GUI_TOUCH_GetState(&statePoint[statePointInter]);

//        if((statePoint[2].x > statePoint[1].x) && (statePoint[1].x > statePoint[0].x)){

//        }



//        GRAPH_DATA_YT_AddValue(newGraph, (short) abs(getPoint.y - 272));


        addNewPoint[0].x = (short) statePoint[statePointInter].x - 5;
        addNewPoint[0].y = (short) abs(statePoint[statePointInter].y - 272) - 5;

        addNewPoint[1].x = addNewPoint[0].x + 10;
        addNewPoint[1].y = addNewPoint[0].y;

        addNewPoint[2].x = addNewPoint[0].x + 10;
        addNewPoint[2].y = addNewPoint[0].y + 10;

        addNewPoint[3].x = addNewPoint[0].x;
        addNewPoint[3].y = addNewPoint[0].y + 10;

        addNewPoint[4].x = addNewPoint[0].x;
        addNewPoint[4].y = addNewPoint[0].y;

        newGraph = GRAPH_DATA_XY_Create(0xcb927f, 5, addNewPoint, 5);
        GRAPH_AttachData(hItem, newGraph);

//        GRAPH_DATA_XY_AddPoint(newGraph, addNewPoint);

        statePointInter = (statePointInter + 1) % 10;

        break;
    // USER END
    default:
        WM_DefaultProc(pMsg);
        break;
    }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateWindowGraph
*/
WM_HWIN CreateWindowGraph(void);
WM_HWIN CreateWindowGraph(void)
{
    WM_HWIN hWin;

    hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
    return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/
